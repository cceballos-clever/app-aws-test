name: pruebas
on:
  workflow_dispatch:

jobs:
  debug:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      PACKER_GITHUB_API_TOKEN: ${{ secrets.PACKER_GITHUB_API_TOKEN }}
      SUBNET_ID: "subnet-04c64c69b982c9bb3" # Cambialo segÃºn tu red

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: "1.10.0"

      - name: Create SSH folder
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Generate temporary key pair
        run: |
          aws ec2 delete-key-pair --key-name temp-gha-key || true
          aws ec2 create-key-pair --key-name temp-gha-key \
            --query "KeyMaterial" --output text > ~/.ssh/temp-key.pem
          chmod 400 ~/.ssh/temp-key.pem
          echo "KEY_NAME=temp-gha-key" >> $GITHUB_ENV
          echo "PRIVATE_KEY_PATH=/home/runner/.ssh/temp-key.pem" >> $GITHUB_ENV

      - name: Packer Init
        working-directory: packer
        run: packer init ami.pkr.hcl

      - name: Build AMI
        working-directory: packer
        run: |
          packer build \
            -var "key_name=$KEY_NAME" \
            -var "private_key_path=$PRIVATE_KEY_PATH" \
            -var "subnet_id=$SUBNET_ID" \
            ami.pkr.hcl

      - name: Get AMI ID
        id: get_ami
        run: |
          AMI_ID=$(jq -r '.builds[0].artifact_id' packer/manifest.json | cut -d':' -f2)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "AMI_ID=$AMI_ID"

      - name: Launch temporary EC2 from AMI
        id: launch
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $AMI_ID \
            --instance-type t3.micro \
            --key-name $KEY_NAME \
            --subnet-id $SUBNET_ID \
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for instance to be running
        run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Get EC2 public IP
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible sshpass

      - name: esperar un cachito a que este atr el demonio
        run: |
          for i in {1..20}; do
            nc -zv ${{ env.PUBLIC_IP }} 22 && break
            echo "Waiting for SSH..."
            sleep 10
          done
      
      - name: Add EC2 to known hosts
        run: ssh-keyscan -H ${{ env.PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Create Ansible inventory
        run: |
          echo "[ec2]" > inventory.ini
          echo "${{ env.PUBLIC_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=$PRIVATE_KEY_PATH" >> inventory.ini
          cat inventory.ini

      - name: Test Ansible connectivity
        run: ansible -i inventory.ini -m ping all

      - name: Cleanup
        if: always()
        run: |
          # Deregistrar AMI y eliminar snapshot
          SNAPSHOT_ID=$(aws ec2 describe-images --image-ids $AMI_ID --query "Images[0].BlockDeviceMappings[0].Ebs.SnapshotId" --output text)
          aws ec2 deregister-image --image-id $AMI_ID
          aws ec2 delete-snapshot --snapshot-id $SNAPSHOT_ID
          # Terminar instancia
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID
          # Eliminar key pair temporal
          aws ec2 delete-key-pair --key-name $KEY_NAME
