name: Deploy Infra AWS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}

      
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: "1.10.0"

      - name: Packer Init
        working-directory: packer
        run: |
          export PACKER_GITHUB_API_TOKEN=${{ secrets.PACKER_GITHUB_API_TOKEN }}
          packer init ami.pkr.hcl


      - name: Build AMI
        run: packer build packer/ami.pkr.hcl
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.0"      

      - name: Get AMI ID
        id: ami
        run: |
          AMI_ID=$(jq -r '.builds[0].artifact_id' manifest.json | cut -d':' -f2)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: terraform
        run: terraform init
             
      - name: Terraform Apply  #-var="private_subnet_ids=[\"subnet-0b3f6d0226fc3122a\", \"subnet-04222f67660946305\"]" \
        continue-on-error: true
        working-directory: terraform
        env:
          TF_LOG: DEBUG
        run: |
          terraform apply -auto-approve \
            -var="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -var="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ami_id=${{ env.AMI_ID }}"

      - name: Get EC2 public IP
        id: get_ip
        working-directory: terraform
        run: |
          terraform output -raw app_server_public_ip > public_ip.txt
          echo "EC2_PUBLIC_IP=$(cat public_ip.txt)" >> $GITHUB_ENV


      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible sshpass

      - name: Create SSH folder
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Write SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/my-key.pem
          chmod 400 ~/.ssh/my-key.pem

      - name: Create Ansible inventory
        run: |
          echo "[ec2]" > inventory.ini
          echo "$EC2_PUBLIC_IP ansible_ssh_private_key_file=~/.ssh/my-key.pem ansible_user=${{ secrets.EC2_SSH_USER }}" >> inventory.ini
          cat inventory.ini

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Run Ansible playbook
        run: |
          ansible-playbook -i inventory.ini playbook.yml


